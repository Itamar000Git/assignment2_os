        -:    0:Source:atom_supplier.cpp
        -:    0:Graph:atom_supplier.gcno
        -:    0:Data:atom_supplier.gcda
        -:    0:Runs:20
        -:    1:
        -:    2:#include <iostream>
        -:    3:#include <cstring>
        -:    4:#include <cstdlib>
        -:    5:#include <unistd.h>
        -:    6:#include <netdb.h>
        -:    7:#include <sys/types.h>
        -:    8:#include <sys/socket.h>
        -:    9:#include <netinet/in.h>
        -:   10:#include <arpa/inet.h>
        -:   11:#include <getopt.h>
        -:   12:#include <sys/un.h>
        -:   13:
        -:   14:
       20:   15:int main(int argc, char* argv[]) {
       20:   16:    if (argc < 3) {
        3:   17:        std::cerr << "Usage: " << argv[0] << "[-h <hostname> -p <port> | -f <UDS stream file path>]" << std::endl;
        3:   18:        return 1;
        -:   19:    }
        -:   20:    const char* hostname;
        -:   21:    int port;
        -:   22:    int opt;
       17:   23:    bool has_host = false, has_port = false;
       17:   24:    bool has_file = false;
       17:   25:    std::string uds_stream_path;
       38:   26:     while ((opt = getopt(argc, argv, "h:p:f:")) != -1) {
       24:   27:        switch (opt) {
        -:   28:             if(std::atoi(optarg) <= 0) {
        -:   29:                    std::cerr << "Error: any flag must be a positive integer." << std::endl;
        -:   30:                    exit(EXIT_FAILURE);
        -:   31:                }
        -:   32:            case 'h':
        -:   33:               
        5:   34:                hostname = optarg;
        5:   35:                has_host = true;
        5:   36:                break;
        8:   37:            case 'p':
        -:   38:            
        8:   39:                port = std::atoi(optarg);
        8:   40:                has_port = true;
        8:   41:                if (port <= 0 || port > 65535) {
        1:   42:                    std::cerr << "Error: Port must be a positive integer between 1 and 65535." << std::endl;
        1:   43:                    exit(EXIT_FAILURE);
        -:   44:                }
        7:   45:                break;
       10:   46:            case 'f':
       10:   47:                uds_stream_path = optarg;
       10:   48:                has_file = true;
       10:   49:                if (uds_stream_path.empty()) {
        1:   50:                    std::cerr << "Error: UDS stream file path cannot be empty." << std::endl;
        1:   51:                    exit(EXIT_FAILURE);
        -:   52:                }
        9:   53:                break;
        1:   54:            default:
        -:   55:                std::cerr << "Usage: " << argv[0]
        1:   56:                          << " [-h <hostname> -p <port> | -f <UDS stream file path>]\n";
        1:   57:                exit(EXIT_FAILURE);
        -:   58:        }
        -:   59:    }
        -:   60:
       14:   61:    if ((!has_host || !has_port)&& !has_file) {
        2:   62:        std::cerr << "Error: Both -h (hostname) and -p (port) flags are required.\n";
        -:   63:        std::cerr << "Usage: " << argv[0]
        2:   64:                          << "  [-h <hostname> -p <port> | -f <UDS stream file path>]\n";
        2:   65:        exit(EXIT_FAILURE);
        -:   66:    }
       12:   67:    if (has_file && (has_host || has_port)) {
        1:   68:        std::cerr << "Error: Cannot use both hostname/port and UDS stream file path together.\n";
        -:   69:        std::cerr << "Usage: " << argv[0]
        1:   70:                  << " [-h <hostname> -p <port> | -f <UDS stream file path>]\n";
        1:   71:        exit(EXIT_FAILURE);
        -:   72:    }
        -:   73:
       11:   74:    int sockfd = -1;
        -:   75:
       11:   76:    if(has_file){
        7:   77:        sockfd = socket(AF_UNIX, SOCK_STREAM, 0);
        7:   78:        if (sockfd < 0) {
    #####:   79:            std::cerr << "Error opening UDS stream socket" << std::endl;
       4*:   80:            return 1;
        -:   81:        }
        -:   82:        struct sockaddr_un serv_addr;
        7:   83:        memset(&serv_addr, 0, sizeof(serv_addr));
        7:   84:        serv_addr.sun_family = AF_UNIX;
        7:   85:        strncpy(serv_addr.sun_path, uds_stream_path.c_str(), sizeof(serv_addr.sun_path) - 1);
        -:   86:
        7:   87:        if (connect(sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {
        4:   88:            std::cerr << "UDS stream connection failed" << std::endl;
        4:   89:            close(sockfd);
        4:   90:            return 1;
        -:   91:        }
        3:   92:        std::cout << "Connected to UDS stream server. Enter commands:" << std::endl;
        -:   93:
        -:   94:    }
        -:   95:    else{
        -:   96:         // Resolve hostname
        4:   97:        struct hostent* server = gethostbyname(hostname);
        4:   98:        if (!server) {
        1:   99:            std::cerr << "No such host: " << hostname << std::endl;
        2:  100:            return 1;
        -:  101:        }
        -:  102:
        -:  103:        // Create socket
        3:  104:        sockfd = socket(AF_INET, SOCK_STREAM, 0);
        3:  105:        if (sockfd < 0) {
    #####:  106:            std::cerr << "Error opening socket" << std::endl;
    #####:  107:            return 1;
        -:  108:        }
        -:  109:
        -:  110:        struct sockaddr_in serv_addr;
        3:  111:        std::memset(&serv_addr, 0, sizeof(serv_addr));
        3:  112:        serv_addr.sin_family = AF_INET;
        3:  113:        std::memcpy(&serv_addr.sin_addr.s_addr, server->h_addr, server->h_length);
        3:  114:        serv_addr.sin_port = htons(port);
        -:  115:
        -:  116:        // Connect to server
        3:  117:        if (connect(sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {
        1:  118:            std::cerr << "Connection failed" << std::endl;
        1:  119:            close(sockfd);
        1:  120:            return 1;
        -:  121:        }
        -:  122:
        2:  123:        std::cout << "Connected to server. Enter commands:" << std::endl;
        -:  124:    }
        -:  125:   
        -:  126:
        -:  127:    while (true) {
       12:  128:        std::cout << "\nChoose atom to add:\n";
       12:  129:        std::cout << "1. Add Carbon\n";
       12:  130:        std::cout << "2. Add Hydrogen\n";
       12:  131:        std::cout << "3. Add Oxygen\n";
       12:  132:        std::cout << "4. Exit\n";
       12:  133:        std::cout << "Enter your choice: ";
        -:  134:        int choice;
       12:  135:        std::cin >> choice;
        -:  136:
       12:  137:        int count = 0;
       12:  138:        std::string line;
        -:  139:
       12:  140:        switch (choice) {
        3:  141:            case 1:
        3:  142:                std::cout << "Enter number of carbon atoms to add: ";
        3:  143:                std::cin >> count;
        3:  144:                line = "ADD CARBON " + std::to_string(count) + "\n";
        3:  145:                break;
        2:  146:            case 2:
        2:  147:                std::cout << "Enter number of hydrogen atoms to add: ";
        2:  148:                std::cin >> count;
        2:  149:                line = "ADD HYDROGEN " + std::to_string(count) + "\n";
        2:  150:                break;
        2:  151:            case 3:
        2:  152:                std::cout << "Enter number of oxygen atoms to add: ";
        2:  153:                std::cin >> count;
        2:  154:                line = "ADD OXYGEN " + std::to_string(count) + "\n";
        2:  155:                break;
        3:  156:            case 4:
        3:  157:                close(sockfd);
        3:  158:                return 0;
        2:  159:            default:
        2:  160:                std::cout << "Invalid choice." << std::endl;
        2:  161:                close(sockfd);
        2:  162:                return 0;
        -:  163:        }
        7:  164:        if (count < 0) {
        1:  165:            std::cout << "Count must be a positive integer." << std::endl;
        -:  166:            
        -:  167:        }
        -:  168:        else{
        6:  169:            ssize_t sent = send(sockfd, line.c_str(), line.size(), 0);
        6:  170:            if (sent < 0) {
    #####:  171:                std::cerr << "Send failed" << std::endl;
    #####:  172:                break;
        -:  173:            }
        -:  174:        }
       19:  175:    }
        -:  176:
        -:  177:    //close(sockfd);
    #####:  178:    return 0;
       11:  179:}
